  - name: set hostname
    hostname:
      name: '{{ hostname }}'
    when: format_hostname

  - name: distribute wise2c apt source for Ubuntu 20 hosts
    template:
      src: '{{ item.src }}'
      dest: '{{ item.dest }}'
    with_items:
    - { src: 'template/wise2c.list-ubuntu20.j2', dest: '/etc/apt/sources.list.d/wise2c.list' }
    when: (ansible_distribution == "Ubuntu") and (ansible_distribution_major_version == "20")

  - name: distribute wise2c apt source for Ubuntu 18 hosts
    template:
      src: '{{ item.src }}'
      dest: '{{ item.dest }}'
    with_items:
    - { src: 'template/wise2c.list-ubuntu18.j2', dest: '/etc/apt/sources.list.d/wise2c.list' }
    when: (ansible_distribution == "Ubuntu") and (ansible_distribution_major_version == "18")

  - name: install python2 for Ubuntu
    shell: |
      mv /etc/apt/sources.list /etc/apt/sources.list.bak
      curl -so /tmp/breeze.pub http://wise2c-seed:2008/debs/ubuntu18/breeze.pub
      apt-key add /tmp/breeze.pub
      rm -f /tmp/breeze.pub
      apt-get update && export DEBIAN_FRONTEND=noninteractive
      apt-get install -y python python-apt python3-docker python-chardet python3-requests
    when:
    - ansible_distribution == "Ubuntu"

  - name: disabled selinux
    selinux:
      state: disabled
    when: (ansible_distribution == "RedHat") or (ansible_distribution == "CentOS") or (ansible_distribution == "Rocky") or (ansible_distribution == "AlmaLinux") or (ansible_distribution == "OracleLinux") or (ansible_distribution == "Anolis")

  - name: start firewalld
    systemd:
      name: firewalld
      enabled: true
      state: started
    when: (ansible_distribution == "RedHat") or (ansible_distribution == "CentOS") or (ansible_distribution == "Rocky") or (ansible_distribution == "AlmaLinux") or (ansible_distribution == "OracleLinux") or (ansible_distribution == "Anolis")

  - name: config firewalld
    shell: |
      firewall-cmd --set-default-zone=trusted
      firewall-cmd --complete-reload
    when: (ansible_distribution == "RedHat") or (ansible_distribution == "CentOS") or (ansible_distribution == "Rocky") or (ansible_distribution == "AlmaLinux") or (ansible_distribution == "OracleLinux") or (ansible_distribution == "Anolis")

  - name: distribute wise2c yum repo for CentOS 7 hosts
    template:
      src: '{{ item.src }}'
      dest: '{{ item.dest }}'
    with_items:
    - { src: 'template/wise2c-centos7.repo.j2', dest: '/etc/yum.repos.d/wise2c.repo' }
    when: ((ansible_distribution == "RedHat") or (ansible_distribution == "CentOS") or (ansible_distribution == "Rocky") or (ansible_distribution == "AlmaLinux") or (ansible_distribution == "OracleLinux") or (ansible_distribution == "Anolis")) and (ansible_distribution_major_version == "7")

  - name: distribute wise2c yum repo for CentOS 8 hosts
    template:
      src: '{{ item.src }}'
      dest: '{{ item.dest }}'
    with_items:
    - { src: 'template/wise2c-centos8.repo.j2', dest: '/etc/yum.repos.d/wise2c.repo' }
    when: ((ansible_distribution == "RedHat") or (ansible_distribution == "CentOS") or (ansible_distribution == "Rocky") or (ansible_distribution == "AlmaLinux") or (ansible_distribution == "OracleLinux") or (ansible_distribution == "Anolis")) and (ansible_distribution_major_version == "8")

  - name: distribute ipvs bootload file
    template:
      src: '{{ item.src }}'
      dest: '{{ item.dest }}'
    with_items:
    - { src: 'template/ipvs.conf.j2', dest: '/etc/modules-load.d/ipvs.conf' }

  - name: modprobe overlay
    community.general.modprobe:
      name: overlay
      state: present

  - name: modprobe br_netfilter
    community.general.modprobe:
      name: br_netfilter
      state: present

  - name: clean yum cache
    shell: |
      yum clean all
    when: (ansible_distribution == "RedHat") or (ansible_distribution == "CentOS") or (ansible_distribution == "Rocky") or (ansible_distribution == "AlmaLinux") or (ansible_distribution == "OracleLinux") or (ansible_distribution == "Anolis")

  - name: yum install tools
    yum:
      disablerepo: '*'
      enablerepo: wise2c-k8s
      update_cache: true
      state: present
      name: '{{ item }}'
    with_items:
    - rsync
    - jq
    - chrony
    - ipvsadm
    when: (ansible_distribution == "RedHat") or (ansible_distribution == "CentOS") or (ansible_distribution == "Rocky") or (ansible_distribution == "AlmaLinux") or (ansible_distribution == "OracleLinux") or (ansible_distribution == "Anolis")

  - name: yum install crio and podman
    yum:
      disablerepo: '*'
      enablerepo: "wise2c-crio,wise2c-k8s"
      update_cache: true
      state: present
      name: '{{ item }}'
    with_items:
    - crio
    - podman
    when: (ansible_distribution == "RedHat") or (ansible_distribution == "CentOS") or (ansible_distribution == "Rocky") or (ansible_distribution == "AlmaLinux") or (ansible_distribution == "OracleLinux") or (ansible_distribution == "Anolis")

  - name: apt install crio and podman and other components
    apt:
      update_cache: true
      state: present
      name: '{{ item }}'
    with_items:
    - docker-compose
    - chrony
    - jq
    - ipvsadm
    - graphviz
    - nfs-common
    - gnupg
    - ipset
    - cri-o
    - cri-o-runc
    - podman
    when: ansible_distribution =="Ubuntu"

  - name: distribute chrony server config for Redhat/CentOS
    template:
      src: '{{ item.src }}'
      dest: '{{ item.dest }}'
    with_items:
    - { src: 'template/chrony/redhat-centos/chrony-server.conf.j2', dest: '/etc/chrony.conf' }
    when:
    - inventory_hostname == ansible_play_batch[0]
    - (ansible_distribution == "RedHat") or (ansible_distribution == "CentOS") or (ansible_distribution == "Rocky") or (ansible_distribution == "AlmaLinux") or (ansible_distribution == "OracleLinux") or (ansible_distribution == "Anolis")

  - name: distribute chrony server config for Ubuntu 20
    template:
      src: '{{ item.src }}'
      dest: '{{ item.dest }}'
    with_items:
    - { src: 'template/chrony/ubuntu20/chrony-server.conf.j2', dest: '/etc/chrony/chrony.conf' }
    when: 
    - inventory_hostname == ansible_play_batch[0]
    - (ansible_distribution == "Ubuntu") and (ansible_distribution_major_version == "20")

  - name: distribute chrony server config for Ubuntu 18
    template:
      src: '{{ item.src }}'
      dest: '{{ item.dest }}'
    with_items:
    - { src: 'template/chrony/ubuntu18/chrony-server.conf.j2', dest: '/etc/chrony/chrony.conf' }
    when:
    - inventory_hostname == ansible_play_batch[0]
    - (ansible_distribution == "Ubuntu") and (ansible_distribution_major_version == "18")

  - name: distribute chrony client config for Redhat/CentOS
    template:
      src: '{{ item.src }}'
      dest: '{{ item.dest }}'
    with_items:
    - { src: 'template/chrony/redhat-centos/chrony-client.conf.j2', dest: '/etc/chrony.conf' }
    when:
    - inventory_hostname != ansible_play_batch[0]
    - (ansible_distribution == "RedHat") or (ansible_distribution == "CentOS") or (ansible_distribution == "Rocky") or (ansible_distribution == "AlmaLinux") or (ansible_distribution == "OracleLinux") or (ansible_distribution == "Anolis")

  - name: distribute chrony client config for Ubuntu 20
    template:
      src: '{{ item.src }}'
      dest: '{{ item.dest }}'
    with_items:
    - { src: 'template/chrony/ubuntu20/chrony-client.conf.j2', dest: '/etc/chrony/chrony.conf' }
    when:
    - inventory_hostname != ansible_play_batch[0]
    - (ansible_distribution == "Ubuntu") and (ansible_distribution_major_version == "20")

  - name: distribute chrony client config for Ubuntu 18
    template:
      src: '{{ item.src }}'
      dest: '{{ item.dest }}'
    with_items:
    - { src: 'template/chrony/ubuntu18/chrony-client.conf.j2', dest: '/etc/chrony/chrony.conf' }
    when:
    - inventory_hostname != ansible_play_batch[0]
    - (ansible_distribution == "Ubuntu") and (ansible_distribution_major_version == "18")

  - name: start chrony for Redhat/CentOS
    systemd:
      name: chronyd
      daemon_reload: true
      enabled: yes
      state: restarted
    when: (ansible_distribution == "RedHat") or (ansible_distribution == "CentOS") or (ansible_distribution == "Rocky") or (ansible_distribution == "AlmaLinux") or (ansible_distribution == "OracleLinux") or (ansible_distribution == "Anolis")

  - name: start chrony for Ubuntu
    systemd:
      name: chrony
      daemon_reload: true
      enabled: yes
      state: restarted
    when: ansible_distribution == "Ubuntu"

  - name: clear crio and registry config files
    copy:
      content: ''
      dest: '{{ item }}'
    with_items:
    - /etc/crio/crio.conf
    - /etc/containers/registries.conf

  - name: fix the metacopy bug for Ubuntu18
    shell: |
      sed -i 's/,metacopy=on//g' /etc/containers/storage.conf
    when: (ansible_distribution == "Ubuntu") and (ansible_distribution_major_version == "18")

  - name: init crio on Redhat/CentOS to create folder /etc/crio
    systemd:
      name: crio
      daemon_reload: true
      enabled: true
      state: restarted
    when: (ansible_distribution == "RedHat") or (ansible_distribution == "CentOS") or (ansible_distribution == "Rocky") or (ansible_distribution == "AlmaLinux") or (ansible_distribution == "OracleLinux") or (ansible_distribution == "Anolis")

  - name: init crio on Ubuntu to create folder /etc/crio
    systemd:
      name: crio
      daemon_reload: true
      enabled: true
      state: restarted
    when: ansible_distribution == "Ubuntu"

  # crio service uses k8s.gcr.io/pause:3.7 as default
  - name: update pause image in crio.conf
    shell: |
      echo '[crio.image]' > /etc/crio/crio.conf
      echo 'pause_image = "{{ harbor }}/library/pause:3.7"' >> /etc/crio/crio.conf

  - name: distribute crio registry config
    template:
      src: '{{ item.src }}'
      dest: '{{ item.dest }}'
    with_items:
    - { src: 'template/registries.conf.j2', dest: '/etc/containers/registries.conf' }
    when: not harbor_https

  - name: distribute crio registry config for harbor with https
    template:
      src: '{{ item.src }}'
      dest: '{{ item.dest }}'
    with_items:
    - { src: 'template/registries.conf.https.j2', dest: '/etc/containers/registries.conf' }
    when: harbor_https

  - name: reload & restart crio on Redhat/CentOS
    systemd:
      name: crio
      daemon_reload: true
      enabled: true
      state: restarted
    when: (ansible_distribution == "RedHat") or (ansible_distribution == "CentOS") or (ansible_distribution == "Rocky") or (ansible_distribution == "AlmaLinux") or (ansible_distribution == "OracleLinux") or (ansible_distribution == "Anolis")

  - name: reload & restart crio on Ubuntu
    systemd:
      name: crio
      daemon_reload: true
      enabled: true
      state: restarted
    when: ansible_distribution == "Ubuntu"

  - name: set sysctl
    sysctl:
      name: '{{ item }}'
      value: 1
      state: present
      reload: true
    with_items:
    - net.ipv4.ip_forward
    - net.bridge.bridge-nf-call-iptables
    - net.bridge.bridge-nf-call-ip6tables

  - name: Fix the warning message "No swap limit support" with docker on Ubuntu
    script: scripts/fix-ubuntu-docker-warning.sh
    when: ansible_distribution == "Ubuntu"
