  - name: set hostname
    hostname:
      name: '{{ hostname }}'
    when: format_hostname

  - name: disabled selinux
    selinux:
      state: disabled

  - name: start firewalld
    systemd:
      name: firewalld
      enabled: true
      state: started

  - name: config firewalld
    shell: |
      firewall-cmd --set-default-zone=trusted
      firewall-cmd --complete-reload

  - name: distribute wise2c yum repo
    template:
      src: '{{ item.src }}'
      dest: '{{ item.dest }}'
    with_items:
    - { src: 'template/wise2c.repo.j2', dest: '/etc/yum.repos.d/wise2c.repo' }

  - name: distribute ipvs bootload file
    template:
      src: '{{ item.src }}'
      dest: '{{ item.dest }}'
    with_items:
    - { src: 'template/ipvs.conf.j2', dest: '/etc/modules-load.d/ipvs.conf' }

  - name: clean yum cache
    shell: |
      yum clean all

  - name: yum install docker
    yum:
      disablerepo: '*'
      enablerepo: "wise2c-crio,wise2c-k8s"
      update_cache: true
      state: present
      name: '{{ item }}'
    with_items:
    - rsync
    - jq
    - docker-ce
    - python3-docker
    - chrony
    - ipvsadm

  - name: distribute chrony server config for Redhat/CentOS
    template:
      src: '{{ item.src }}'
      dest: '{{ item.dest }}'
    with_items:
    - { src: 'template/chrony/redhat-centos/chrony-server.conf.j2', dest: '/etc/chrony.conf' }
    when:
    - inventory_hostname == ansible_play_batch[0]

  - name: distribute chrony client config for Redhat/CentOS
    template:
      src: '{{ item.src }}'
      dest: '{{ item.dest }}'
    with_items:
    - { src: 'template/chrony/redhat-centos/chrony-client.conf.j2', dest: '/etc/chrony.conf' }
    when:
    - inventory_hostname != ansible_play_batch[0]

  - name: start chrony for Redhat/CentOS
    systemd:
      name: chronyd
      daemon_reload: true
      enabled: yes
      state: restarted

  - name: clear docker config for Redhat/CentOS
    copy:
      content: ''
      dest: '{{ item }}'
    with_items:
    - /etc/sysconfig/docker
    - /etc/sysconfig/docker-storage
    - /etc/sysconfig/docker-storage-setup
    - /etc/sysconfig/docker-network

  - name: init docker to create folder /etc/docker
    systemd:
      name: docker
      daemon_reload: true
      enabled: true
      state: restarted

  - name: distribute docker config
    template:
      src: '{{ item.src }}'
      dest: '{{ item.dest }}'
    with_items:
    - { src: 'template/daemon.json.j2', dest: '/etc/docker/daemon.json' }
    when: not harbor_https

  - name: distribute external docker config
    template:
      src: '{{ item.src }}'
      dest: '{{ item.dest }}'
    with_items:
    - { src: 'template/daemon.json.https.j2', dest: '/etc/docker/daemon.json' }
    when: harbor_https

  - name: reload & restart docker
    systemd:
      name: docker
      daemon_reload: true
      enabled: true
      state: restarted

  - name: set sysctl
    sysctl:
      name: '{{ item }}'
      value: 1
      state: present
      reload: true
    with_items:
    - net.ipv4.ip_forward
    - net.bridge.bridge-nf-call-iptables
    - net.bridge.bridge-nf-call-ip6tables
