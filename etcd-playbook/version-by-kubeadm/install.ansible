- name: install etcd
  hosts: etcd
  user: root
  vars:
    path: /var/lib/wise2c/tmp/etcd
  tasks:
  - name: copy backup scripts
    template:
      src: '{{ item.src }}'
      dest: '{{ item.dest }}'
      mode: 0755
    with_items:
    - { src: 'file/backup-etcd-database-folder.sh', dest: '{{ path }}/' }
    - { src: 'file/make-etcd-snapshot.sh', dest: '{{ path }}/' }
    - { src: 'file/etcd-healthcheck.sh', dest: '{{ path }}/' }

  - name: make a snapshot for etcd cluster
    shell: ./make-etcd-snapshot.sh
    args:
      chdir: '{{ path }}'
    when: (snapshot_etcd == true)

  - name: stop etcd container
    shell: |
      podman stop etcd
    when: (backup_etcd_folder == true)

  - name: backup etcd database folder
    shell: ./backup-etcd-database-folder.sh
    args:
      chdir: '{{ path }}'
    when: (backup_etcd_folder == true)

  - name: start etcd container
    shell: |
      podman start etcd
    when: (backup_etcd_folder == true)

  - name: make etcd dir
    file:
      path: '{{ item }}'
      state: directory
      mode: 0755
    with_items:
      - '{{ path }}'

  - name: copy etcd image
    copy:
      src: '{{ item.src }}'
      dest: '{{ item.dest }}'
    with_items:
      - { src: 'file/etcd.tar.bz2', dest: '{{ path }}' }
    run_once: true

  - name: load etcd image
    shell: |
      podman load -i {{ path }}/etcd.tar.bz2
    async: 60
    poll: 5
    run_once: true

  - name: podman login
    containers.podman.podman_login:
      registry: '{{ registry_endpoint }}'
      username: '{{ registry_user }}'
      password: '{{ registry_password }}'
    run_once: true

  - name: tag images
    shell: |
      podman tag k8s.gcr.io/etcd:{{ version }} {{ registry_endpoint }}/{{ registry_project }}/etcd:{{ version }}
    run_once: true

  - name: push images
    containers.podman.podman_image:
      name: '{{ registry_endpoint }}/{{ registry_project }}/{{ item.name }}'
      tag: '{{ item.tag }}'
      push: true
      state: present
    with_items:
      - { repo: 'k8s.gcr.io', name: 'etcd', tag: '{{ version }}' }
    run_once: true

  - name: remove original images tag
    containers.podman.podman_image:
      state: absent
      name: '{{ item.repo }}/{{ item.name }}'
      tag: '{{ item.tag }}'
    with_items:
      - { repo: 'k8s.gcr.io', name: 'etcd', tag: '{{ version }}' }
    run_once: true

  - name: make etcd cert dir
    file:
      path: '/etc/etcd/pki'
      state: directory
      mode: 0755
  
  - name: unarchive cfssl tool
    unarchive:
      src: file/cfssl-tools.tar.gz
      dest: /usr/local/bin
    run_once: true

  - name: copy certificates JSON files
    copy:
      src: '{{ item.src }}'
      dest: '{{ item.dest }}'
    with_items:
    - { src: 'file/ca-csr.json', dest: '{{ path }}/' }
    - { src: 'file/ca-config.json', dest: '{{ path }}/' }
    - { src: 'file/etcd-csr.json', dest: '{{ path }}/' }
    run_once: true

  - name: copy certificates generation scripts
    template:
      src: '{{ item.src }}'
      dest: '{{ item.dest }}'
      mode: 0755
    with_items:
    - { src: 'file/generate-etcd-certificates.sh', dest: '{{ path }}/' }
    run_once: true

  - name: generate etcd certificates
    raw: |
      /var/lib/wise2c/tmp/etcd/generate-etcd-certificates.sh
    run_once: true

  - name: fetch etcd certificates
    fetch:
      src: '{{ item.src }}'
      dest: '{{ item.dest }}'
      flat: true
    with_items:
    - { src: '/etc/etcd/pki/ca.pem', dest: '../ca.pem' }
    - { src: '/etc/etcd/pki/ca-key.pem', dest: '../ca-key.pem' }
    - { src: '/etc/etcd/pki/etcd.pem', dest: '../etcd.pem' }
    - { src: '/etc/etcd/pki/etcd-key.pem', dest: '../etcd-key.pem' }
    run_once: true
  
  - name: copy certificates
    copy:
      src: '{{ item.src }}'
      dest: '{{ item.dest }}'
    with_items:
    - { src: '../ca.pem', dest: '/etc/etcd/pki/ca.pem' }
    - { src: '../ca-key.pem', dest: '/etc/etcd/pki/ca-key.pem' }
    - { src: '../etcd.pem', dest: '/etc/etcd/pki/etcd.pem' }
    - { src: '../etcd-key.pem', dest: '/etc/etcd/pki/etcd-key.pem' }

  - name: makdir etc database folder
    shell: |
      mkdir -p {{ etcd_data_path }}

  - name: run etcd
    containers.podman.podman_container:
      name: etcd
      network_mode: host
      image: "{{ registry_endpoint }}/{{ registry_project }}/etcd:{{ version }}"
      command: '{{ command }}'
      volumes:
        - "{{ etcd_data_path }}:/var/lib/etcd"
        - "/etc/etcd/pki:/etcd-cert"

  - name: add etcd systemd service
    shell: |
      podman generate systemd --new --name etcd > /etc/systemd/system/etcd.service
      systemctl enable etcd
